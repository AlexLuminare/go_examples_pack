Атомики — это низкоуровневые примитивы синхронизации, которые позволяют производить операции чтения, записи и 
модификации на переменных (обычно целых числах или указателях) атомарно, то есть без прерываний другими потоками. 
В Go атомики реализуются через пакет sync/atomic.

Основные операции:

    1. atomic.AddInt32, atomic.AddInt64 — атомарное сложение.
    2. atomic.LoadInt32, atomic.LoadInt64 — атомарное чтение.
    3. atomic.StoreInt32, atomic.StoreInt64 — атомарная запись.
    4. atomic.CompareAndSwap (CAS) — атомарное сравнение и замена значения.

Эти функции используют низкоуровневую поддержку процессоров, обеспечивая высокую производительность.


Преимущества атомиков
1. Высокая производительность:

    Операции атомиков реализуются на уровне процессора и часто быстрее мьютексов, так как они избегают контекстных переключений и блокировок потоков.
    Особенно полезно для простых операций, таких как инкременты или проверки.

2. Минимизация блокировок:

    Атомики не требуют захвата блокировки, что снижает вероятность взаимных блокировок (deadlock).

3. Легкость в использовании:

    Для некоторых задач (например, подсчёт счётчиков) атомики обеспечивают простой и эффективный способ синхронизации.