sync.Cond в Go используется для координации выполнения горутин, которые должны ждать 
определенного условия, прежде чем продолжить выполнение. Вот основные условия и 
рекомендации по использованию sync.Cond:

1. Инициализация:
sync.Cond инициализируется с помощью sync.NewCond, который принимает указатель на sync.Locker 
(обычно это *sync.Mutex или *sync.RWMutex).

Использование методов Wait, Signal и Broadcast:
Wait:
* Вызывается, когда горутина должна ждать, пока не будет выполнено определенное условие.
* Wait автоматически освобождает связанный Locker и блокирует горутину до тех пор, пока она не будет разбужена с помощью Signal или Broadcast.
После пробуждения Wait повторно захватывает Locker перед возвратом.
Signal:
* Пробуждает одну из горутин, ожидающих на условной переменной.
* Используется, когда выполнение одной горутины может продолжиться.
Broadcast:
* Пробуждает все горутины, ожидающие на условной переменной.
* Используется, когда выполнение всех ожидающих горутин может продолжиться.

Правильное использование блокировок:
Все операции с sync.Cond (включая Wait, Signal, и Broadcast) должны выполняться, когда Locker 
заблокирован. Это гарантирует, что состояние, проверяемое горутиной, не изменится между проверкой 
условия и вызовом Wait.
Проверка условий в цикле: Обычно Wait вызывается в цикле for, чтобы повторно проверить условие 
после пробуждения. Это необходимо, потому что пробуждение может произойти по другим причинам 
(например, из-за ложного пробуждения).
